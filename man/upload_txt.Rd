% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/upload_txt.R
\name{upload_txt}
\alias{upload_txt}
\title{Upload and parse data for JAMES}
\usage{
upload_txt(
  txt,
  host = "http://localhost",
  format = "2.0",
  schema = NULL,
  verbose = FALSE
)
}
\arguments{
\item{txt}{Data set. Could be a URL, local file, JSON string or JSON object.}

\item{host}{String with the host. The default is \code{"http://localhost"}.}

\item{format}{String. JSON data schema version number. There are currently
three schemas supported: \code{"1.0"}, \code{"1.1"}, \code{"2.0"} and \code{"3.0"}. Formats \code{"1.0"} and
\code{"1.1"} are included for backward compatibility only. Use \code{format = "3.0"}
for new applications.}

\item{schema}{A file name (optionally including the path) with the JSON
validation schema.
The \code{schema} argument overrides \code{format}. The function extracts the
version number for the basename, and overwrites the
\code{format} argument by version number.}

\item{verbose}{Logical. Print diagnostic information of POST request to console.}
}
\value{
An object of class \code{\link[httr:response]{httr::response()}}
}
\description{
Client side upload of a JSON file, string or URL with BDS data, checks the data,
stores its contents as a tibble with a person attribute on host,
and returns an object of class \code{\link[httr:response]{httr::response()}}
that contains the results of the request.
}
\details{
JSON format: See
\url{https://stefvanbuuren.name/jamesdocs/getting-data-into-james.html}
for the specification of the JSON format.

User agent: The function \code{upload_txt()} searches for an object called \code{ua} on the search
list. The \code{ua} object is an optional user agent, a request that identifies
yourself to the API. For example, run
\code{httr::user_agent("https://github.com/myaccount")} (with
\code{myaccount} replaced by your github user name) before
calling \code{upload_txt()}. See
\url{https://httr.r-lib.org/articles/api-packages.html} for details. Setting
the user agent is not required.

Append \code{"/json"} to \code{path} and set \code{query = "auto_unbox=TRUE&force=TRUE"}
to obtain a partial JSON representation of the S4 class \code{individual}. At present, it is not
possible to rebuild the S4 class \code{individual} from its JSON representation because
the S4 class depends on environments, and these are not converted to JSON.
Warning: The S4 class
\code{individual} is an internal format that is in development. It is likely to
change, so don't build applications based on this data structure. If you need
components from the internal structure (e.g. Z-scores, brokenstick estimates) it
is better to develop a dedicated API for obtaining these.
}
\examples{
library(httr)

host <- "http://localhost"
url <- "http://localhost/ocpu/library/bdsreader/examples/Laura_S.json"
fn <- system.file("extdata", "bds_v3.0", "smocc", "Laura_S.json",
 package = "jamesdemodata", mustWork = TRUE)
js <- read_json_js(url)
jo <- read_json_jo(url)

# upload JSON file
r1 <- upload_txt(fn, host)
identical(status_code(r1), 201L)

# upload JSON string
r2a <- upload_txt(js, host)
identical(status_code(r2a), 201L)
r2b <- upload_txt(jo, host)
identical(status_code(r2b), 201L)

# upload JSON from external URL.
r3 <- upload_txt(url, host, format = "1.0")
identical(status_code(r3), 201L)

# browseURL(file.path(get_url(r3), "print"))
# browseURL(file.path(get_url(r3), "json"))
}
